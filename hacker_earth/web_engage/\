// =====================================================================================
//
//       Filename:  interest.cpp
//
//    Description:  http://www.hackerearth.com/webengage-hiring-challenge-1/algorithm/numbers-of-interest-2-1/
//
//        Version:  1.0
//        Created:  Sunday 21 September 2014 10:17:20  IST
//       Revision:  none
//       Compiler:  g++
//
//         Author:  Brajesh Kumar (), kbrajesh176@gmail.com
//   Organization:  
//
// =====================================================================================



//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<bitset>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<fstream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;i++)
#define REP(i,n) FOR(i,0,n)
#define pb push_back
#define mp make_pair
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define fill(a,v) memset(a, v, sizeof a)
#define sz(a) int((a).size())
#define INF (int)1e9
#define EPS 1e-9
#define bitcount __builtin_popcount
#define all(c) (c).begin(), (c).end()
#define maX(a,b) (a>b?a:b)
#define miN(a,b) (a<b?a:b)
#define DREP(a) sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind) lower_bound(all(arr),ind)-arr.begin()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())

typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef unsigned long long LL;
typedef vector<long long > VLL;
typedef pair<int, int > PII;
typedef vector< PII > VPII;
/*Main Code*/
#define EXIT_SUCCESS 0
// ===  FUNCTION  ======================================================================
//         Name:  main
//  Description:  main function
// =====================================================================================
#define MAX 1000011
VI primes;
int sieve[MAX];
LL x[MAX];
LL y[MAX];

/* This function calculates (a^b) */
LL  modulo(int a,int b){
    LL x=1,y=a; // long long is taken to avoid overflow of intermediate results
    while(b > 0){
        if(b%2 == 1){
            x=(x*y);
        }
        y = (y*y); // squaring the base
        b /= 2;
    }
    return x;
}

void preprocess(){
    sieve[0] = sieve[1] = 1;
    x[0] = x[1] = 0;
    REP(i, MAX){
        y[i] = 1;
        x[0] = x[1] = 0;
    }
    y[0] = y[1] = 0;
    for(LL i = 2; i < MAX; i++){
        if(!sieve[i]){
            for(LL j = i * i; j < MAX; j += i){
                sieve[j] = 1;
                if(x[j] == 0){
                    x[j] = i;
                }
            }
            //if(i * i <= MAX){
                primes.pb(i);
            //}
            x[i] = i;
            y[i] = 1;
        }
    }

    FOR(i, 2, MAX){
        // printf("for i = %d \n", i);
        int k = i;
        if(sieve[i]){
            REP(j, (int)primes.size()){
                LL p = primes[j];
                if(p*p < i){
                    int t = 0;
                    while(k % p == 0){
                        t++;
                        k /= p;
                    }
                    if(t > 0){
                        // printf("adding t = %d, p = %d\n", t, p);
                        y[i] *= (modulo(p, t + 1) - 1)/ (p - 1);
                    }
                } else {
                    break;
                }
            }

            if(k > 1){
                y[i] += k + 1;
            }
            // printf("y[%d] = %lld\n",i, y[i]);
            y[i] -= i;
        }
    }
    /*
    REP(i, 20){
        printf("%lld %lld\n", x[i], y[i] + i);
    }*/
    FOR(i, 1, MAX){
        x[i] = x[i - 1] + x[i];
        y[i] = y[i - 1] + y[i];
    }
}

int main ( int argc, char *argv[] ){
    preprocess();
    int t;
    s(t);
    int n;
    while(t--){
        s(n);
        printf("%lld\n", (x[n] % n + y[n] %n ) % n);
    }
	return EXIT_SUCCESS;
}		// ----------  end of function main  ---------- 

