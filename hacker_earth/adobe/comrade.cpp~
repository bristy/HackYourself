//http://www.codechef.com/FEB14/problems/DRGHTS

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<bitset>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<fstream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;i++)
#define REP(i,n) FOR(i,0,n)
#define pb push_back
#define mp make_pair
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define fill(a,v) memset(a, v, sizeof a)
#define sz(a) int((a).size())
#define INF (int)1e9
#define EPS 1e-9
#define bitcount __builtin_popcount
#define all(c) (c).begin(), (c).end()
#define maX(a,b) (a>b?a:b)
#define miN(a,b) (a<b?a:b)
#define DREP(a) sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind) lower_bound(all(arr),ind)-arr.begin())
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())

typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef long long LL;
typedef vector<long long > VLL;
typedef pair<int, int > PII;
typedef vector< PII > VPII;
/*Main Code*/
#define MAX 100010
#define YES 1
#define NO 0

VI g[MAX];
int type[MAX];
int visited[MAX];

VI currComponent;
int N;
int a;
LL hand, bump;
int prev ;
int dp[MAX];



  int n, l;

VI tin, tout;
 int timer;
 vector< VI > up;

 void dfs (int v, int p) {
	 tin [v] = + + timer;
	 up [v] [0] = p;
	 for (int i = 1; i <= l; + + i)
		 up [v] [i] = up [up [v] [i-1]] [i-1];
	 for (size_t i = 0; i <g [v]. size (); + + i) {
		 int to = g [v] [i];
		 if (to != p)
			 dfs (to, v);
	 }
	 tout [v] = ++timer;
 }

 bool upper (int a, int b) {
	 return tin [a] <= tin [b] && tout [a]>= tout [b];
 }

 int lca (int a, int b) {
	 if (upper (a, b)) return a;
	 if (upper (b, a)) return b;
	 for (int i = l; i>= 0; - i)
		 if (! upper (up [a] [i], b))
			 a = up [a] [i];
	 return up [a] [0];
 }


int  dfsPATH(int start){
    if(visited[start] == YES){
        return dp[start];
    }
    visited[start] = YES;
    currComponent.pb(start);
    tr(g[start],c){
        int u = *c;
        if(visited[u] == NO){

            dp[start] = dfsPATH(u) + 1;
        }
    }
    return dp[start];
}




void solve(){

}


int main(){
    int t;
    for(s(t);t;t--){

        cin>>N;
        REP(i,N){
            dp[i] = 0;
            g[i].clear();
        }
        REP(i,N){
          s(a);
          if(a>0){
            g[i].pb(a-1);
          }
        }
    tin.resize (n), tout.resize (n), up.resize (n);
	 l = 1;
	 while ((1 << l) <= n) + + l;
	 for (int i = 0; i <n; + + i) up [i]. resize (l +1);
	 dfs (0,0);
        hand = 0;
        bump = 0;
        prev = 0;
        solve();
        cout<<hand<<" "<<bump<<endl;
    }
    return 0;
}
